// Generated by CoffeeScript 1.3.3

/*
mouseFollower - jQuery Plugin

About this plugin, visit github project page.
https://github.com/bugcloud/mouse-follower
*/


(function() {
  var $;

  $ = jQuery;

  $.fn.followMouse = function(opt) {
    var default_options, options;
    default_options = {
      animationSpeed: 100,
      easingFunction: "linear",
      noFollowDistance: 0,
      distance: [0, 0],
      position: "bottom-right",
      catchUpCallback: function() {}
    };
    options = $.extend({}, default_options, opt);
    this.each(function() {
      var $_that, obj;
      $_that = $(this);
      obj = {};
      obj.selfWidth = $_that.outerWidth();
      obj.selfHeight = $_that.outerHeight();
      obj.currentPosition = null;
      $("html").mousemove(function(e) {
        var distance, l, props, px, py, t;
        if (obj.currentPosition === null) {
          obj.currentPosition = e;
        }
        px = obj.currentPosition.pageX - e.pageX;
        py = obj.currentPosition.pageY - e.pageY;
        distance = Math.sqrt(Math.pow(px, 2) + Math.pow(py, 2));
        if (distance > options.noFollowDistance) {
          $_that.stop(false, false);
          t = e.pageY - obj.selfHeight / 2;
          l = e.pageX - obj.selfWidth / 2;
          if (!(distance[0] === 0 && distance[1] === 0)) {
            switch (options.position) {
              case "top-left":
                t = t - options.distance[0];
                l = l - options.distance[1];
                break;
              case "top-right":
                t = t - options.distance[0];
                l = l + options.distance[1];
                break;
              case "bottom-left":
                t = t + options.distance[0];
                l = l - options.distance[1];
                break;
              case "bottom-right":
                t = t + options.distance[0];
                l = l + options.distance[1];
            }
          }
          props = {
            top: t,
            left: l
          };
          $_that.animate(props, options.animationSpeed, options.easingFunction, options.catchUpCallback);
          obj.currentPosition = e;
        }
      });
    });
    return this;
  };

}).call(this);
